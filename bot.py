import logging
import random
import os # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import asyncio # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –≤–µ–±—Ö—É–∫–∞
import uvicorn # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from fastapi import FastAPI, Request, Response # –î–æ–±–∞–≤–ª–µ–Ω FastAPI –¥–ª—è –≤–µ–±—Ö—É–∫–∞
from http import HTTPStatus
import time # Keep existing time import if needed elsewhere
from datetime import datetime, timedelta # Added for job queue scheduling
import sys # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Message, BotCommand
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Application
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, JobQueue
from telegram.helpers import escape_markdown
import telegram # Added for error types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ç–µ–º—ã ---
DEFAULT_THEME_KEY = "classic"
EMPTY_CELL_SYMBOL = "empty" # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –≤ —Ç–µ–º–µ

THEMES = {
    "classic": {
        "name": "–ö–ª–∞—Å—Å–∏–∫–∞",
        "X": "‚ùå",
        "O": "‚≠ï",
        EMPTY_CELL_SYMBOL: "‚¨ú",
        "X_win": "‚≠ê‚ùå‚≠ê",
        "O_win": "‚≠ê‚≠ï‚≠ê"
    },
    "animals": {
        "name": "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
        "X": "üê±",
        "O": "üê∂",
        EMPTY_CELL_SYMBOL: "üêæ",
        "X_win": "üèÜüê±üèÜ",
        "O_win": "üèÜüê∂üèÜ"
    },
    "food": {
        "name": "–ï–¥–∞",
        "X": "üçï",
        "O": "üçî",
        EMPTY_CELL_SYMBOL: "‚ñ´Ô∏è",
        "X_win": "üåüüçïüåü",
        "O_win": "üåüüçîüåü"
    }
    # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
}

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN!")
    sys.exit(1) # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω

# URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç RENDER_EXTERNAL_URL)
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL") 
# –õ–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω)
if not WEBHOOK_URL:
   logger.warning("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEBHOOK_URL –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.")
   WEBHOOK_URL = "https://your-local-tunnel-or-ip" # –ó–∞–º–µ–Ω–∏—Ç–µ, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —Å —Ç—É–Ω–Ω–µ–ª–µ–º

# –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç PORT)
PORT = int(os.getenv("PORT", "8080"))

# –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å –≤ set_webhook –∏ –≤ endpoint)
WEBHOOK_PATH = "/webhook"
WEBHOOK_ENDPOINT_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä {chat_id: game_data}
games: dict[int, dict] = {} 

# --- FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–≥–ª–æ–±–∞–ª—å–Ω–æ–µ) ---
fastapi_app = FastAPI()

banned_users = set()

chat_stats = {}

@fastapi_app.get("/")
async def health_check():
    return {"status": "–ê–ª–∏ —á–µ–º–ø–∏–æ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç application) ---
async def handle_telegram_update(request: Request, application: Application):
     """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö PTB."""
     try:
         body = await request.json()
         update = Update.de_json(body, application.bot)
         logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
         await application.process_update(update)
         return Response(status_code=HTTPStatus.OK)
     except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
         return Response(status_code=HTTPStatus.INTERNAL_SERVER_ERROR)

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (start, new_game, get_symbol_emoji, get_keyboard, check_winner, button_click) --- 
# –û–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ê–ª–∏ —á–µ–º–ø–∏–æ–Ω! üé≤ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newgame\n"
        "üé® –°–º–µ–Ω–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–≥—Ä—ã: /themes" # –î–æ–±–∞–≤–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–∞—Ö
    )

async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newgame - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    username = update.effective_user.username or f"player_{user_id}"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –ø–æ username –∏–ª–∏ user_id
    if str(user_id) in banned_users or (update.effective_user.username and update.effective_user.username in banned_users):
        await update.message.reply_text("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—ã.")
        return
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –±–æ—Ç –ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ---
    if hasattr(context, 'bot') and getattr(context.bot, 'id', None) == user_id:
        logger.warning(f"Bot attempted to start a new game in chat {user_id}. Ignoring.")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–≥—Ä–æ–∫–æ–º! –û–∂–∏–¥–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É ---
    if chat_id in games and not games[chat_id].get('game_over', True):
         game_message_id = games[chat_id].get('message_id')
         warning_text = "‚è≥ –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã."
         try:
             await update.message.reply_text(
                 warning_text,
                 reply_to_message_id=game_message_id # Reply to the game message if possible
             )
         except telegram.error.BadRequest as e:
             if "Message to be replied not found" in str(e):
                 logger.warning(f"Original game message {game_message_id} not found in chat {chat_id}. Sending new message.")
                 await update.message.reply_text(warning_text) # Send as a new message
             else:
                 logger.error(f"BadRequest when trying to reply in new_game: {e}")
                 # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
                 await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
         except Exception as e:
             logger.error(f"Unexpected error when trying to reply in new_game: {e}")
             await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

         logger.warning(f"User {username} ({user_id}) tried to start a new game in chat {chat_id} while another is active.")
         return

    # --- –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏–≥—Ä—ã ---
    if user_id in games: # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ chat_id
        old_job = games[user_id].get('timeout_job')
        if old_job:
            try:
                old_job.schedule_removal()
                logger.info(f"Removed previous timeout job for chat {user_id} before starting new game.")
            except Exception as e: # –õ–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏, –≤–∫–ª—é—á–∞—è JobLookupError
                logger.warning(f"Could not remove previous timeout job for chat {user_id} (maybe already removed or finished?): {e}")
        del games[user_id] # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π –∏–≥—Ä—ã (—Ç–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        logger.info(f"Removed old game data for chat {user_id} before starting new game.")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    initiator_theme_key = context.user_data.get('chosen_theme', DEFAULT_THEME_KEY)
    game_theme_emojis = THEMES.get(initiator_theme_key, THEMES[DEFAULT_THEME_KEY])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    first_player = random.choice(["X", "O"])
    second_player = "O" if first_player == "X" else "X"
    
    game_data = {
        "board": list(range(1, 10)),
        "current_player": first_player,
        "game_over": False,
        "players": {
            first_player: user_id,
            second_player: None
        },
        "user_symbols": {
            user_id: first_player
        },
        "usernames": {
            user_id: username
        },
        "message_id": None, # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä—ã
        "timeout_job": None, # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ç–∞–π–º-–∞—É—Ç–∞
        "theme_emojis": game_theme_emojis # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    }
    games[user_id] = game_data

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        first_player_emoji = get_symbol_emoji(first_player, game_theme_emojis)
        
        sent_message = await update.message.reply_text(
            f"üé≤ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
            f"üé® –¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
            f"üë§ {escape_markdown(username, version=1)} –∏–≥—Ä–∞–µ—Ç –∑–∞ {first_player_emoji}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n\n"
            f"*–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç*: {first_player_emoji}\n\n"
            f"‚è±Ô∏è *–í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É*: 90 —Å–µ–∫—É–Ω–¥", # –î–æ–±–∞–≤–∏–ª–∏ –∏–Ω—Ñ–æ –æ –≤—Ä–µ–º–µ–Ω–∏
            reply_markup=get_keyboard(user_id),
            parse_mode="Markdown"
        )
        game_data['message_id'] = sent_message.message_id
        logger.info(f"New game started by {username} ({user_id}) in chat {user_id}. Message ID: {sent_message.message_id}")

        # --- –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä ---
        job_context = {'chat_id': user_id, 'message_id': sent_message.message_id}
        timeout_job = context.job_queue.run_once(
            game_timeout,
            when=timedelta(seconds=90),
            data=job_context,
            name=f"game_timeout_{user_id}"
        )
        game_data['timeout_job'] = timeout_job
        logger.info(f"Scheduled timeout job for game in chat {user_id}")

    except telegram.error.BadRequest as e:
         logger.error(f"Failed to send new game message in chat {user_id}: {e}")
         # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É
         del games[user_id]
    except Exception as e:
        logger.error(f"Unexpected error starting game in chat {user_id}: {e}", exc_info=True)
        if user_id in games:
            del games[user_id]

def get_symbol_emoji(symbol, game_theme_emojis: dict):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–º—É —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã."""
    if symbol == "X":
        return game_theme_emojis.get("X", "‚ùå") # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞
    elif symbol == "O":
        return game_theme_emojis.get("O", "‚≠ï") # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞
    elif isinstance(symbol, int): # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
        return game_theme_emojis.get(EMPTY_CELL_SYMBOL, "‚¨ú") # –§–æ–ª–ª–±—ç–∫
    return str(symbol) # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ

def get_keyboard(chat_id, winning_indices: list | None = None):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º.
       –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∑–∞–Ω—è—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã) –∏–º–µ—é—Ç callback_data='noop'.
       –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã winning_indices.
    """
    if chat_id not in games: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        logger.warning(f"get_keyboard called for non-existent game in chat {chat_id}")
        return None

    game_data = games[chat_id]
    board = game_data["board"]
    is_game_over = game_data["game_over"]
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY]) # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ç–µ–º—É
    keyboard = []
    logger.debug(f"[get_keyboard chat={chat_id}] Board: {board}, Theme: {theme_emojis.get('name', 'Unknown')}, Winning: {winning_indices}")

    # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            cell_index = i + j
            cell = board[cell_index]
            cell_text = ""
            callback_data = "noop" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (—Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∏–ª–∏ –±–µ–∑)
            if isinstance(cell, int):
                cell_text = get_symbol_emoji(cell, theme_emojis)
                if not is_game_over: # –°–¥–µ–ª–∞—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç
                    callback_data = str(cell_index)
            else:
                # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–±–µ–¥–æ–π –∏ —ç—Ç–∞ –∫–ª–µ—Ç–∫–∞ –≤ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –ª–∏–Ω–∏–∏
                if is_game_over and winning_indices and cell_index in winning_indices:
                    win_symbol_key = f"{cell}_win"
                    cell_text = theme_emojis.get(win_symbol_key, get_symbol_emoji(cell, theme_emojis)) # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª
                else:
                    cell_text = get_symbol_emoji(cell, theme_emojis)
                # callback_data –æ—Å—Ç–∞–µ—Ç—Å—è "noop"

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.debug(f"[get_keyboard chat={chat_id}] Cell[{cell_index}]: {repr(cell)} -> Emoji: {repr(cell_text)}, Callback: {callback_data}")

            row.append(InlineKeyboardButton(cell_text, callback_data=callback_data))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    control_row = []
    if is_game_over:
        control_row.append(InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game"))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        control_row.append(InlineKeyboardButton("üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="change_theme_prompt"))
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã/—Å–¥–∞—á–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # control_row.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_game"))

    if control_row: # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        keyboard.append(control_row)

    return InlineKeyboardMarkup(keyboard)

def check_winner(board):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∏—á—å—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (winner_symbol, winning_indices) –∏–ª–∏ ("–ù–∏—á—å—è", None) –∏–ª–∏ (None, None)
    """
    # –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]              # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
    for combo in win_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] and not isinstance(board[combo[0]], int):
            return board[combo[0]], combo  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º–≤–æ–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é (–µ—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–Ω—è—Ç—ã)
    if not any(isinstance(cell, int) for cell in board):
        return "–ù–∏—á—å—è", None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–∏—á—å—è" –∏ None –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏

    return None, None  # –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ '–ù–æ–≤–∞—è –∏–≥—Ä–∞'"""
    query = update.callback_query
    user = update.effective_user
    user_id = user.id
    username = user.username or f"player_{user_id}"
    if str(user_id) in banned_users or (user.username and user.username in banned_users):
        try:
            await query.answer("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å.", show_alert=True)
        except Exception:
            pass
        return
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏", –Ω–æ –ª–æ–≤–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
    try:
        await query.answer()
    except telegram.error.BadRequest as e:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∂–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        logger.warning(f"Failed to answer callback query (likely too old): {e}")
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–∞–ª—å—à–µ

    data = query.data
    chat_id = update.effective_chat.id
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–∞—Ö)
    message_id = query.message.message_id if query.message else None

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞? ---
    if chat_id not in games:
        logger.warning(f"Button click received for non-existent game in chat {chat_id}. Data: {data}")
        await query.answer("ü§î –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å "–º–µ—Ä—Ç–≤–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if message_id:
            try:
                await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
                logger.info(f"Removed keyboard from potentially stale game message {message_id} in chat {chat_id}")
            except telegram.error.BadRequest:
                 logger.warning(f"Could not remove keyboard from message {message_id} in chat {chat_id} (likely already deleted or no markup).")
            except Exception as e:
                logger.error(f"Error removing keyboard from message {message_id} in chat {chat_id}: {e}")
        return

    game_data = games[chat_id]
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ó –°–û–•–†–ê–ù–ï–ù–ù–´–• –î–ê–ù–ù–´–• –ò–ì–†–´
    game_message_id = game_data.get('message_id')

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –ê–∫—Ç—É–∞–ª—å–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ? ---
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞ —Å ID, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–≥—Ä
    if message_id and game_message_id and message_id != game_message_id:
        logger.warning(f"Button click received on an OLD game message ({message_id}, expected {game_message_id}) in chat {chat_id}. Data: {data}. User: {user_id}")
        await query.answer("–≠—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç —Å—Ç–∞—Ä–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é!", show_alert=True)
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
             await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except Exception as e:
             logger.warning(f"Could not remove keyboard from old message {message_id} in chat {chat_id}: {e}")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    game_theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])

    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ('noop')
    if data == "noop":
        if game_data["game_over"]:
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            await query.answer("üèÅ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!", show_alert=False)
        # –ò–Ω–∞—á–µ (–∫–ª–∏–∫ –Ω–∞ –∑–∞–Ω—è—Ç—É—é –∫–ª–µ—Ç–∫—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã) - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" ('new_game')
    if data == "new_game":
        logger.info(f"User {username} ({user_id}) initiating new game via button in chat {chat_id}.")

        # --- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É (–≤—ã–∑—ã–≤–∞–µ–º async new_game) ---
        # new_game —Å–∞–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏–≥—Ä—ã –∏ –æ—Ç–º–µ–Ω—É —Ç–∞–π–º–µ—Ä–∞.
        fake_message = query.message # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
        if not fake_message:
             await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.", show_alert=True)
             logger.error(f"Could not get message object from callback query to start new game in chat {chat_id}")
             return

        fake_update = Update(
            update_id=update.update_id,
            message=fake_message
        )
        await new_game(fake_update, context)
        return # –í—ã—Ö–æ–¥–∏–º, new_game —Å–¥–µ–ª–∞–ª–∞ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É –ø–æ–ª—è)
    if data.isdigit():
        cell_index = int(data)
        username = update.effective_user.username or f"player_{user_id}" # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # --- –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º ---
        if game_data["game_over"]:
            await query.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é.", show_alert=True)
            logger.warning(f"User {username} ({user_id}) tried to make a move in finished game in chat {chat_id}.")
            return

        current_player_symbol = game_data["current_player"]
        current_player_id = game_data["players"].get(current_player_symbol)

        # -- –ü—Ä–æ–≤–µ—Ä–∫–∞: –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è? --
        second_player_symbol = "O" if current_player_symbol == "X" else "X"
        second_player_id = game_data["players"].get(second_player_symbol)

        if not second_player_id:
            logger.debug(f"[button_click chat={chat_id}] No second player yet. "
                         f"Clicker user_id={user_id}, Current player symbol={current_player_symbol}, "
                         f"Current player_id={current_player_id}. Comparing user_id != current_player_id.")
            # –ï—Å–ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –ù–ï —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º (–∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç)
            if user_id != current_player_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
                if context.bot.id == user_id:
                    # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç, –æ—Ç–∫–ª–æ–Ω—è–µ–º –µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
                    logger.warning(f"[button_click chat={chat_id}] Bot attempted to join game as P2. Rejecting.")
                    await query.answer("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –∫–∞–∫ –∏–≥—Ä–æ–∫!", show_alert=True)
                    return
                
                # !!! –î–û–ë–ê–í–õ–ï–ù–û –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï !!!
                logger.warning(f"[button_click chat={chat_id}] *** UNEXPECTED JOIN *** "
                             f"Joining user {user_id} ({username}) as P2. "
                             f"Current player was {current_player_id}. "
                             f"This block should NOT execute if user_id == current_player_id.")
                # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–∞–∫ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                game_data["players"][second_player_symbol] = user_id
                game_data["user_symbols"][user_id] = second_player_symbol
                game_data["usernames"][user_id] = username
                second_player_id = user_id # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                logger.info(f"Player 2 ({username}, {user_id}) joined the game in chat {chat_id} playing as {second_player_symbol}.")

                # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
                timeout_job = game_data.get('timeout_job')
                if timeout_job:
                    timeout_job.schedule_removal()
                    game_data['timeout_job'] = None # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
                    logger.info(f"Removed timeout job for chat {chat_id} as second player joined.")

                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ç–æ—Ä–æ–º –∏–≥—Ä–æ–∫–µ
                initiator_id = game_data["players"][current_player_symbol] # ID –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                initiator_username = game_data["usernames"].get(initiator_id, f"player_{initiator_id}")
                escaped_initiator = escape_markdown(initiator_username, version=1)
                escaped_second = escape_markdown(username, version=1)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–º—ã
                p1_emoji = get_symbol_emoji(current_player_symbol, game_theme_emojis)
                p2_emoji = get_symbol_emoji(second_player_symbol, game_theme_emojis)
                current_player_emoji = get_symbol_emoji(game_data["current_player"], game_theme_emojis) # –¢–µ–∫—É—â–∏–π —Ö–æ–¥—è—â–∏–π

                try:
                    await query.edit_message_text(
                        f"üé≤ *–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
                        f"üé® –¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
                        f"üë§ {escaped_initiator} –∏–≥—Ä–∞–µ—Ç –∑–∞ {p1_emoji}\n"
                        f"üë§ {escaped_second} –∏–≥—Ä–∞–µ—Ç –∑–∞ {p2_emoji}\n\n"
                        f"*–•–æ–¥–∏—Ç*: {current_player_emoji}", # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫—Ç–æ —Ö–æ–¥–∏—Ç
                        reply_markup=get_keyboard(chat_id), # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
                        parse_mode="Markdown"
                    )
                except telegram.error.RetryAfter as e:
                     logger.warning(f"Flood control exceeded trying to update message after player 2 joined: {e}")
                     await asyncio.sleep(e.retry_after)
                     try: # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                        await query.edit_message_text(
                             f"üé≤ *–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
                             f"üé® –¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
                             f"üë§ {escaped_initiator} –∏–≥—Ä–∞–µ—Ç –∑–∞ {p1_emoji}\n"
                             f"üë§ {escaped_second} –∏–≥—Ä–∞–µ—Ç –∑–∞ {p2_emoji}\n\n"
                             f"*–•–æ–¥–∏—Ç*: {current_player_emoji}",
                             reply_markup=get_keyboard(chat_id),
                             parse_mode="Markdown"
                         )
                     except Exception as inner_e:
                         logger.error(f"Failed to edit message even after retry: {inner_e}")
                except telegram.error.BadRequest as e:
                     logger.error(f"Failed to edit message after player 2 joined (maybe deleted?): {e}")
                except Exception as e:
                     logger.error(f"Unexpected error editing message after player 2 joined: {e}", exc_info=True)

                # –ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤—ã—Ö–æ–¥–∏–º, —Ö–æ–¥ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º
                return

            # –ï—Å–ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –Ø–í–õ–Ø–ï–¢–°–Ø –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º
            else:
                 logger.debug(f"[button_click chat={chat_id}] First player clicked before second joined. User ID {user_id}. Sending wait message.")
                 await query.answer("‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!", show_alert=False)
                 return # <-- –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, –Ω–µ –¥–∞–µ–º —Ö–æ–¥–∏—Ç—å
        # -- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ --

        # -- –ü—Ä–æ–≤–µ—Ä–∫–∞: –•–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞? --
        if user_id != current_player_id:
            current_player_username = game_data["usernames"].get(current_player_id, f"player_{current_player_id}")
            await query.answer(f"‚è±Ô∏è –ù–µ –≤–∞—à —Ö–æ–¥! –°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç {current_player_username}", show_alert=False)
            return

        # -- –ü—Ä–æ–≤–µ—Ä–∫–∞: –ö–ª–µ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞? --
        board = game_data["board"]
        if not isinstance(board[cell_index], int):
            await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
            return

        # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ ---
        board[cell_index] = current_player_symbol
        logger.info(f"Player {username} ({user_id}) marked cell {cell_index} with {current_player_symbol} in chat {chat_id}.")

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ---
        winner, winning_indices = check_winner(board)
        if winner:
            game_data["game_over"] = True
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω (—Ö–æ—Ç—è –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
            timeout_job = game_data.get('timeout_job')
            if timeout_job:
                timeout_job.schedule_removal()
                game_data['timeout_job'] = None
                logger.info(f"Removed timeout job for chat {chat_id} as game ended with a winner.")

            keyboard_to_show = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if winner == "–ù–∏—á—å—è":
                message_text = f"üèÅ *–ù–∏—á—å—è!* üèÅ\n\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*"
                logger.info(f"Game in chat {chat_id} ended in a draw.")
                keyboard_to_show = get_keyboard(chat_id) # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∏—á—å–µ–π
            else: # –ï—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
                 winner_id = game_data["players"][winner]
                 winner_username = game_data["usernames"].get(winner_id, f"player_{winner_id}")
                 escaped_winner = escape_markdown(winner_username, version=1)
                 winner_emoji = get_symbol_emoji(winner, game_theme_emojis) # –≠–º–æ–¥–∑–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                 message_text = f"üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - {escaped_winner} ({winner_emoji})!* üèÜ\n\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*"
                 logger.info(f"Game in chat {chat_id} won by {winner_username} ({winner_id}) playing as {winner}.")
                 # –ü–µ—Ä–µ–¥–∞–µ–º winning_indices –≤ get_keyboard –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                 keyboard_to_show = get_keyboard(chat_id, winning_indices=winning_indices)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
            try:
                await query.edit_message_text(
                    message_text,
                    reply_markup=keyboard_to_show, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    parse_mode="Markdown"
                )
            except telegram.error.RetryAfter as e:
                 logger.warning(f"Flood control exceeded trying to update message on game end: {e}")
                 await asyncio.sleep(e.retry_after)
                 try: # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                     await query.edit_message_text(message_text, reply_markup=keyboard_to_show, parse_mode="Markdown")
                 except Exception as inner_e:
                     logger.error(f"Failed to edit message on game end even after retry: {inner_e}")
            except telegram.error.BadRequest as e:
                logger.error(f"Failed to edit message on game end (maybe deleted?): {e}")
            except Exception as e:
                logger.error(f"Unexpected error editing message on game end: {e}", exc_info=True)

            chat_id = update.effective_chat.id
            stats = chat_stats.setdefault(chat_id, {"games": 0, "wins": 0, "draws": 0, "top_players": {}})
            stats["games"] += 1
            if winner == "–ù–∏—á—å—è":
                stats["draws"] += 1
            else:
                stats["wins"] += 1
                winner_id = game_data["players"][winner]
                winner_name = game_data["usernames"].get(winner_id, str(winner_id))
                stats["top_players"][winner_name] = stats["top_players"].get(winner_name, 0) + 1

        else:
            # --- –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞ ---
            game_data["current_player"] = second_player_symbol
            next_player_id = game_data["players"][second_player_symbol]
            next_player_username = game_data["usernames"].get(next_player_id, f"player_{next_player_id}")
            escaped_next_player = escape_markdown(next_player_username, version=1)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–º—ã
            p1_id = game_data["players"]["X"]
            p2_id = game_data["players"]["O"]
            p1_username = game_data["usernames"].get(p1_id, f"player_{p1_id}")
            p2_username = game_data["usernames"].get(p2_id, f"player_{p2_id}")
            p1_emoji = get_symbol_emoji("X", game_theme_emojis)
            p2_emoji = get_symbol_emoji("O", game_theme_emojis)
            next_player_emoji = get_symbol_emoji(game_data["current_player"], game_theme_emojis)

            message_text = (
                 f"üé≤ *–ò–≥—Ä–∞ –∏–¥–µ—Ç!* üé≤\n\n"
                 f"üé® –¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
                 f"üë§ {escape_markdown(p1_username, version=1)} ({p1_emoji}) vs {escape_markdown(p2_username, version=1)} ({p2_emoji})\n\n"
                 f"*–•–æ–¥–∏—Ç*: {escaped_next_player} ({next_player_emoji})"
            )
            try:
                await query.edit_message_text(
                    message_text,
                    reply_markup=get_keyboard(chat_id),
                    parse_mode="Markdown"
                )
            except telegram.error.RetryAfter as e:
                 logger.warning(f"Flood control exceeded trying to update message on turn change: {e}")
                 await asyncio.sleep(e.retry_after)
                 try: # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                     await query.edit_message_text(message_text, reply_markup=get_keyboard(chat_id), parse_mode="Markdown")
                 except Exception as inner_e:
                     logger.error(f"Failed to edit message on turn change even after retry: {inner_e}")
            except telegram.error.BadRequest as e:
                 # –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–µ.
                 if "Message is not modified" not in str(e):
                      logger.error(f"Failed to edit message on turn change (maybe deleted or unmodified?): {e}")
            except Exception as e:
                 logger.error(f"Unexpected error editing message on turn change: {e}", exc_info=True)

    return # –•–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞ ---
async def game_timeout(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ —Ç–∞–π–º–µ—Ä—É, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è."""
    job_context = context.job.data
    chat_id = job_context['chat_id']
    message_id = job_context.get('message_id') # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏

    if chat_id in games:
        game_data = games[chat_id]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–≥—Ä–∞ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if not game_data.get('game_over') and not game_data['players'].get(game_data.get('current_player', 'X') if game_data.get('current_player', 'X') == 'O' else 'O'): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            game_data['game_over'] = True
            game_theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY]) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
            logger.info(f"Game in chat {chat_id} timed out waiting for the second player.")

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=f"‚åõ *–í—Ä–µ–º—è –≤—ã—à–ª–æ!* ‚åõ\n\n–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]]), # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
                        parse_mode="Markdown"
                    )
                    logger.info(f"Edited game message {message_id} in chat {chat_id} to show timeout.")
                    game_data['timeout_job'] = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                except telegram.error.BadRequest as e:
                    logger.error(f"Failed to edit message {message_id} on timeout (maybe deleted?): {e}")
                    # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                    game_data['timeout_job'] = None
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=f"‚åõ *–í—Ä–µ–º—è –≤—ã—à–ª–æ!* ‚åõ\n\n–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*",
                             reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]]),
                             parse_mode="Markdown"
                        )
                        game_data['timeout_job'] = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                    except Exception as send_e:
                         logger.error(f"Failed to send timeout message in chat {chat_id}: {send_e}")
                         # –í—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º, —Ç.–∫. —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
                         game_data['timeout_job'] = None

                except Exception as e:
                     logger.error(f"Unexpected error editing message on timeout in chat {chat_id}: {e}", exc_info=True)
                     game_data['timeout_job'] = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            else:
                logger.warning(f"Message ID not found for timed out game in chat {chat_id}, cannot edit original message.")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. —Å—Ç–∞—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –º–æ–∂–µ–º
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                         text=f"‚åõ *–í—Ä–µ–º—è –≤—ã—à–ª–æ!* ‚åõ\n\n–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*",
                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]]),
                         parse_mode="Markdown"
                    )
                    game_data['timeout_job'] = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                except Exception as send_e:
                     logger.error(f"Failed to send timeout message in chat {chat_id}: {send_e}")
                     game_data['timeout_job'] = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        elif game_data.get('timeout_job'):
             # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
             logger.info(f"Timeout job executed for chat {chat_id}, but the game state was already active or finished. No action taken.")
             # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             game_data['timeout_job'] = None

    else:
        logger.warning(f"Timeout job executed for chat {chat_id}, but no game data found.")

# --- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–º ---
async def themes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /themes - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    user_id = update.effective_user.id
    chosen_theme_key = context.user_data.get('chosen_theme', DEFAULT_THEME_KEY)
    current_theme = THEMES.get(chosen_theme_key, THEMES[DEFAULT_THEME_KEY])

    buttons = []
    for key, theme in THEMES.items():
        button_text = f"{theme['name']} {theme['X']}/{theme['O']}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        if key == chosen_theme_key:
             button_text = f"‚úÖ {button_text}"
        buttons.append([InlineKeyboardButton(button_text, callback_data=f"theme_select_{key}")])

    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        f"üé® *–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–≥—Ä—ã* üé®\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: *{current_theme['name']} {current_theme['X']}/{current_theme['O']}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

async def select_theme_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer() # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏

    theme_key = query.data.split("theme_select_")[-1]
    user_id = update.effective_user.id

    if theme_key in THEMES:
        context.user_data['chosen_theme'] = theme_key
        chosen_theme = THEMES[theme_key]
        logger.info(f"User {update.effective_user.username} ({user_id}) selected theme: {theme_key}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä
        buttons = []
        for key, theme in THEMES.items():
            button_text = f"{theme['name']} {theme['X']}/{theme['O']}"
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
            if key == theme_key:
                 button_text = f"‚úÖ {button_text}"
            buttons.append([InlineKeyboardButton(button_text, callback_data=f"theme_select_{key}")])
        keyboard = InlineKeyboardMarkup(buttons)

        try:
            await query.edit_message_text(
                f"üé® *–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–≥—Ä—ã* üé®\n\n"
                f"‚úÖ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: *{chosen_theme['name']} {chosen_theme['X']}/{chosen_theme['O']}*\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except telegram.error.BadRequest as e:
             # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ
             logger.warning(f"Failed to edit themes message: {e}")
             await update.effective_chat.send_message(
                 f"‚úÖ –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{chosen_theme['name']} {chosen_theme['X']}/{chosen_theme['O']}*",
                 parse_mode="Markdown"
             )

    else:
        logger.warning(f"Invalid theme key received: {theme_key}")
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–∞!", show_alert=True)

# --- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ---

async def change_theme_prompt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É' –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã."""
    query = update.callback_query
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    game_data = games[chat_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if game_data.get('game_over', True):
        await query.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–æ–∫–æ–º
    player_symbols = [sym for sym, pid in game_data["players"].items() if pid == user_id]
    if not player_symbols:
        await query.answer("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–µ–º—É.", show_alert=True)
        return
        
    await query.answer() # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤–º–µ—Å—Ç–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    buttons = []
    current_game_theme_key = None
    # –ù–∞–π–¥–µ–º –∫–ª—é—á —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∏–≥—Ä—ã –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
    current_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])
    for key, theme in THEMES.items():
        if theme == current_emojis:
            current_game_theme_key = key
            break
            
    for key, theme in THEMES.items():
        button_text = f"{theme['name']} {theme['X']}/{theme['O']}"
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏–≥—Ä—ã
        if key == current_game_theme_key:
            button_text = f"üéÆ {button_text}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –∑–Ω–∞—á–æ–∫ –¥–ª—è —Ç–µ–º—ã –∏–≥—Ä—ã
        buttons.append([InlineKeyboardButton(button_text, callback_data=f"theme_select_ingame_{key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã —Ç–µ–º—ã
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ", callback_data="cancel_theme_change")])
    
    keyboard = InlineKeyboardMarkup(buttons)
    
    try:
        await query.edit_message_text(
            f"üé® *–°–º–µ–Ω–∞ —Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã* üé®\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã. –≠—Ç–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç –≤–∞—à—É —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±—É–¥—É—â–∏—Ö –∏–≥—Ä.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        logger.info(f"User {user_id} initiated theme change prompt in game in chat {chat_id}")
    except telegram.error.BadRequest as e:
        logger.error(f"Failed to show theme selection prompt in chat {chat_id}: {e}")
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã.", show_alert=True)

async def select_theme_ingame_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã."""
    query = update.callback_query
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    theme_key = query.data.split("theme_select_ingame_")[-1]

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
        
    game_data = games[chat_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–æ–∫–æ–º
    player_symbols = [sym for sym, pid in game_data["players"].items() if pid == user_id]
    if not player_symbols:
        await query.answer("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É —Ç–µ–º—ã.", show_alert=True)
        return
        
    if theme_key not in THEMES:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–∞.", show_alert=True)
        logger.warning(f"Invalid ingame theme key received: {theme_key} from user {user_id}")
        return

    await query.answer(f"–¢–µ–º–∞ '{THEMES[theme_key]['name']}' –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!") 

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    game_data['theme_emojis'] = THEMES[theme_key]
    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['chosen_theme'] = theme_key
    logger.info(f"User {user_id} changed ingame theme to {theme_key} in chat {chat_id}. User preference also updated.")

    # 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π –∏ —Å—Ç–∞—Ä–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    game_theme_emojis = game_data['theme_emojis'] # –£–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ (–ª–æ–≥–∏–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ button_click –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–æ–¥–∞)
    current_player_symbol = game_data['current_player']
    current_player_id = game_data['players'].get(current_player_symbol)
    current_player_username = game_data['usernames'].get(current_player_id, f"player_{current_player_id}")
    escaped_current_player = escape_markdown(current_player_username, version=1)
    
    p1_id = game_data["players"].get("X")
    p2_id = game_data["players"].get("O")
    p1_username = game_data["usernames"].get(p1_id, f"player_{p1_id}") if p1_id else "?"
    p2_username = game_data["usernames"].get(p2_id, f"player_{p2_id}") if p2_id else "–û–∂–∏–¥–∞–Ω–∏–µ"
    
    p1_emoji = get_symbol_emoji("X", game_theme_emojis)
    p2_emoji = get_symbol_emoji("O", game_theme_emojis)
    current_player_emoji = get_symbol_emoji(current_player_symbol, game_theme_emojis)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if p2_id: 
        message_text = (
             f"üé≤ *–ò–≥—Ä–∞ –∏–¥–µ—Ç!* üé≤\n\n"
             f"üé® –¢–µ–º–∞: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}* (–∏–∑–º–µ–Ω–µ–Ω–∞)\n\n"
             f"üë§ {escape_markdown(p1_username, version=1)} ({p1_emoji}) vs {escape_markdown(p2_username, version=1)} ({p2_emoji})\n\n"
             f"*–•–æ–¥–∏—Ç*: {escaped_current_player} ({current_player_emoji})"
        )
    else: # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—â–µ –Ω–µ—Ç
        message_text = (
            f"üé≤ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
            f"üé® –¢–µ–º–∞: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}* (–∏–∑–º–µ–Ω–µ–Ω–∞)\n\n"
            f"üë§ {escape_markdown(p1_username, version=1)} –∏–≥—Ä–∞–µ—Ç –∑–∞ {p1_emoji}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n\n"
            f"*–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç*: {current_player_emoji}\n\n"
            f"‚è±Ô∏è *–í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É*: 90 —Å–µ–∫—É–Ω–¥"
        )
        
    try:
        await query.edit_message_text(
            message_text,
            reply_markup=get_keyboard(chat_id), # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode="Markdown"
        )
    except telegram.error.BadRequest as e:
        logger.error(f"Failed to restore game message after ingame theme change in chat {chat_id}: {e}")
    except Exception as e:
        logger.error(f"Unexpected error restoring game message after ingame theme change in chat {chat_id}: {e}", exc_info=True)

async def cancel_theme_change_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ' –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã."""
    query = update.callback_query
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
        
    game_data = games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–æ–∫–æ–º (—Ö–æ—Ç—è –±—ã —á—Ç–æ–± –Ω–∞–≤–µ—Ä–Ω—è–∫–∞)
    player_symbols = [sym for sym, pid in game_data["players"].items() if pid == user_id]
    if not player_symbols and user_id not in game_data["players"].values(): # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await query.answer("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É —Ç–µ–º—ã.", show_alert=True)
        return

    await query.answer("–°–º–µ–Ω–∞ —Ç–µ–º—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"User {user_id} cancelled ingame theme change in chat {chat_id}.")

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã —Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    game_theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ (–∫–∞–∫ –≤ select_theme_ingame_callback, –Ω–æ –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ "–∏–∑–º–µ–Ω–µ–Ω–∞")
    current_player_symbol = game_data['current_player']
    current_player_id = game_data['players'].get(current_player_symbol)
    current_player_username = game_data['usernames'].get(current_player_id, f"player_{current_player_id}")
    escaped_current_player = escape_markdown(current_player_username, version=1)
    
    p1_id = game_data["players"].get("X")
    p2_id = game_data["players"].get("O")
    p1_username = game_data["usernames"].get(p1_id, f"player_{p1_id}") if p1_id else "?"
    p2_username = game_data["usernames"].get(p2_id, f"player_{p2_id}") if p2_id else "–û–∂–∏–¥–∞–Ω–∏–µ"
    
    p1_emoji = get_symbol_emoji("X", game_theme_emojis)
    p2_emoji = get_symbol_emoji("O", game_theme_emojis)
    current_player_emoji = get_symbol_emoji(current_player_symbol, game_theme_emojis)
    
    if p2_id: 
        message_text = (
             f"üé≤ *–ò–≥—Ä–∞ –∏–¥–µ—Ç!* üé≤\n\n"
             f"üé® –¢–µ–º–∞: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
             f"üë§ {escape_markdown(p1_username, version=1)} ({p1_emoji}) vs {escape_markdown(p2_username, version=1)} ({p2_emoji})\n\n"
             f"*–•–æ–¥–∏—Ç*: {escaped_current_player} ({current_player_emoji})"
        )
    else: # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—â–µ –Ω–µ—Ç
        message_text = (
            f"üé≤ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
            f"üé® –¢–µ–º–∞: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
            f"üë§ {escape_markdown(p1_username, version=1)} –∏–≥—Ä–∞–µ—Ç –∑–∞ {p1_emoji}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n\n"
            f"*–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç*: {current_player_emoji}\n\n"
            f"‚è±Ô∏è *–í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É*: 90 —Å–µ–∫—É–Ω–¥"
        )

    try:
        await query.edit_message_text(
            message_text,
            reply_markup=get_keyboard(chat_id), # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode="Markdown"
        )
    except telegram.error.BadRequest as e:
        logger.error(f"Failed to restore game message after cancelling theme change in chat {chat_id}: {e}")
    except Exception as e:
         logger.error(f"Unexpected error restoring game message after cancelling theme change in chat {chat_id}: {e}", exc_info=True)

async def reset_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)."""
    if update.effective_user.username != "sadea12":
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    chat_id = update.effective_chat.id
    if chat_id in games:
        del games[chat_id]
        await update.message.reply_text("‚ôªÔ∏è –ò–≥—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å–±—Ä–æ—à–µ–Ω–∞.")
        logger.info(f"–ò–≥—Ä–∞ –≤ —á–∞—Ç–µ {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
    else:
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ user_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)."""
    if update.effective_user.username != "sadea12":
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <@username –∏–ª–∏ user_id>")
        return
    target = context.args[0].lstrip('@')
    banned_users.add(target)
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ user_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)."""
    if update.effective_user.username != "sadea12":
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <@username –∏–ª–∏ user_id>")
        return
    target = context.args[0].lstrip('@')
    if target in banned_users:
        banned_users.remove(target)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–∞–Ω–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
    else:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ.")

async def chat_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.username != "sadea12":
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    chat_id = update.effective_chat.id
    stats = chat_stats.get(chat_id)
    if not stats:
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    msg = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É {chat_id}:"]
    msg.append(f"–í—Å–µ–≥–æ –∏–≥—Ä: {stats['games']}")
    msg.append(f"–ü–æ–±–µ–¥: {stats['wins']}")
    msg.append(f"–ù–∏—á—å–∏—Ö: {stats['draws']}")
    if stats['top_players']:
        msg.append("–¢–æ–ø-–∏–≥—Ä–æ–∫–∏ –ø–æ –ø–æ–±–µ–¥–∞–º:")
        for user, count in sorted(stats['top_players'].items(), key=lambda x: -x[1]):
            msg.append(f"- {user}: {count}")
    await update.message.reply_text("\n".join(msg))

async def main() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º."""

    if not TOKEN:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        sys.exit(1)

    job_queue = JobQueue()
    application = Application.builder().token(TOKEN).job_queue(job_queue).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ PTB ---
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("newgame", new_game))
    application.add_handler(CommandHandler("themes", themes_command))
    application.add_handler(CommandHandler("resetgame", reset_game))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CommandHandler("unban", unban_user))
    application.add_handler(CommandHandler("chatstats", chat_stats_command))
    application.add_handler(CallbackQueryHandler(button_click, pattern=r"^(noop|[0-8]|new_game)$"))
    application.add_handler(CallbackQueryHandler(change_theme_prompt_callback, pattern=r"^change_theme_prompt$"))
    application.add_handler(CallbackQueryHandler(select_theme_ingame_callback, pattern=r"^theme_select_ingame_"))
    application.add_handler(CallbackQueryHandler(cancel_theme_change_callback, pattern=r"^cancel_theme_change$"))
    application.add_handler(CallbackQueryHandler(select_theme_callback, pattern=r"^theme_select_"))

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await application.initialize()
    logger.info("PTB –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
    commands = [
        BotCommand("start", "üëã –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("newgame", "üé≤ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
        BotCommand("themes", "üé® –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É (—ç–º–æ–¥–∑–∏)"),
        BotCommand("resetgame", "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"),
        BotCommand("ban", "üö´ –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"),
        BotCommand("unban", "‚úÖ –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"),
        BotCommand("chatstats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)")
    ]
    try:
        await application.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω) ---
    if WEBHOOK_ENDPOINT_URL:
        try:
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ PTB –Ω–∞ URL: {WEBHOOK_ENDPOINT_URL}")
            await application.bot.set_webhook(
                url=WEBHOOK_ENDPOINT_URL,
                allowed_updates=Update.ALL_TYPES
            )
            logger.info("–í–µ–±—Ö—É–∫ PTB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

            # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤–µ–±—Ö—É–∫–∞ FastAPI --- 
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–∏ main, —á—Ç–æ–±—ã –æ–Ω–∞ –∏–º–µ–ª–∞ –¥–æ—Å—Ç—É–ø –∫ 'application'
            async def fastapi_webhook_endpoint(request: Request):
                return await handle_telegram_update(request, application)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            fastapi_app.add_api_route(
                path=WEBHOOK_PATH, 
                endpoint=fastapi_webhook_endpoint, 
                methods=["POST"]
            )
            logger.info(f"FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç {WEBHOOK_PATH} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
            # sys.exit(1) # –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–µ–±—Ö—É–∫–∞
    else:
        logger.warning("WEBHOOK_ENDPOINT_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Uvicorn ---
    config = uvicorn.Config(
        app=fastapi_app, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        port=PORT,
        host="0.0.0.0",
        # reload=True # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    )
    server = uvicorn.Server(config)

    # --- –ó–∞–ø—É—Å–∫ PTB –∏ Uvicorn ---
    await application.start()
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {config.host}:{config.port}...")
    await server.serve()

    # --- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ---
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await application.stop()
    logger.info("PTB –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    # (–ö–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True) 